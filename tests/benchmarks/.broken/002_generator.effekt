// Jonathan Frech, 2022-08-17, 2022-08-18
// adapted from: https://raw.githubusercontent.com/effect-handlers/effect-handlers-bench/a61925f19c60600cd0bdaf8b3a6b82eea9aefcf0/benchmarks/koka/002_generator/benchmark.kk

effect YieldNum {
    def yield_num(num: Int): Unit
}

type Tree[A] {
    Leaf();
    Node(left: Tree[A], v: A, right: Tree[A])
}

//type Generator[A] {
//    Empty();
//    Thunk(v: a, rest: // TODO higher-order-functions needed: e.g. `cont { t => resume(t) }`
//}

def make_tree(n: Int): Tree[Int] = {
    if (n == 0) {
        Leaf()
    } else {
        val sub = make_tree(n - 1)
        Node(sub, n, sub)
    }
}

def iterate(tree: Tree[Int]): Unit / YieldNum = tree match {
    case Leaf() => ()
    case Node(left, v, right) =>
        iterate(left);
        do yield_num(v);
        iterate(right)
}

//fun consumer() = {} // TODO higher-order-functions needed
//fun sum-generator() = {} // TODO higher-order-functions needed

////////////////////////////////////////////////////////////////////////////////

def main() = {
    val n = 3
    try {
        iterate(make_tree(n))
    } with YieldNum {
        def yield_num(num) = { println(num); resume(()) }
    }
}
