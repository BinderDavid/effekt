module data/list

type List[A] {
  Nil();
  Cons(head: A, tail: List[A])
}

def map[A, B](l: List[A]) { f: A => B } : List[B] =
  l match {
    case Nil() => Nil[B]()
    case Cons(a, rest) => Cons(f(a), map(rest) { a => f(a) })
  }

def foreach[A](l: List[A]) { f: A => Unit } : Unit =
  l match {
    case Nil() => ()
    case Cons(a, rest) => { f(a); foreach(rest) { a => f(a) } }
  }

def reverse[A](l: List[A]): List[A] = {
  def reverseWith(l: List[A])(acc: List[A]): List[A] = l match {
    case Nil() => acc
    case Cons(a, rest) => rest.reverseWith(Cons(a, acc))
  }
  l.reverseWith(Nil())
}

def isEmpty[A](l: List[A]): Boolean = l match {
  case Nil() => true
  case Cons(a, rest) => false
}
