// Based on libraries\js\monadic\effekt.effekt
// TODO: ignoring double for now

module effekt

extern include "effekt.sml"

//extern effect Console

//def locally[R] { f: => R }: R = f()

// Side effecting ops
// ==================
extern io def println(value: String): Unit =
  """print (value ^ "\n")"""

extern io def println(value: Int): Unit =
  """print ((Int.toString value) ^ "\n")"""

extern io def println(value: Boolean): Unit =
  """print ((Bool.toString value) ^ "\n")"""

// // TODO: more println types

// // TODO: random
// // extern io def random(): Double =
// //   "Math.random()"

// // TODO: js is milliseconds (which need 64 bit)
// extern io def timestamp(): Int =
//   "(Time.toSeconds(Time.now()))"

// // String ops
// // ==========
// // TODO: show
// // extern pure def show[R](value: R): String =
// //   "show$impl(value)"

extern pure def infixConcat(s1: String, s2: String): String =
  "s1 ^ s2"

// Math ops
// ========
extern pure def infixAdd(x: Int, y: Int): Int =
  "x + y"

extern pure def infixMul(x: Int, y: Int): Int =
  "x * y"

extern pure def infixDiv(x: Int, y: Int): Int =
  "x div y"

extern pure def infixSub(x: Int, y: Int): Int =
  "x - y"

extern pure def mod(x: Int, y: Int): Int =
  "x mod y"

// extern pure def infixAdd(x: Double, y: Double): Double =
//   "(x + y)"

// extern pure def infixMul(x: Double, y: Double): Double =
//   "(x * y)"

// extern pure def infixSub(x: Double, y: Double): Double =
//   "(x - y)"

// extern pure def infixDiv(x: Double, y: Double): Double =
//   "(x / y)"


// // extern pure def cos(x: Double): Double =
// //   "Math.cos(x)"

// // extern pure def sin(x: Double): Double =
// //   "Math.sin(x)"

// // extern pure def atan(x: Double): Double =
// //   "Math.atan(x)"

// // extern pure def tan(x: Double): Double =
// //   "Math.tan(x)"

// // extern pure def sqrt(x: Double): Double =
// //   "Math.sqrt(x)"

// // extern pure def square(x: Double): Double =
// //   "(x * x)"

// // extern pure def log(x: Double): Double =
// //   "Math.log(x)"

// // extern pure def log1p(x: Double): Double =
// //   "Math.log1p(x)"

// // extern pure def exp(x: Double): Double =
// //   "Math.exp(x)"

// // // since we do not have "extern val", yet
// // extern pure def _pi(): Double =
// //   "Math.PI"

// // val PI: Double = _pi()

// // extern pure def toInt(d: Double): Int =
// //   "Math.round(d)"

// // extern pure def toDouble(d: Int): Double =
// //   "d"

// // extern pure def floor(d: Double): Int =
// //   "Math.floor(d)"

// // extern pure def ceil(d: Double): Int =
// //   "Math.ceil(d)"


// Comparison ops
// ==============
// extern pure def infixEq[R](x: R, y: R): Boolean =
//   "equals$impl(x, y)"

// extern pure def infixNeq[R](x: R, y: R): Boolean =
//   "!equals$impl(x, y)"

extern pure def infixLt(x: Int, y: Int): Boolean =
  "x < y"

extern pure def infixLte(x: Int, y: Int): Boolean =
  "x <= y"

extern pure def infixGt(x: Int, y: Int): Boolean =
  "x > y"

extern pure def infixGte(x: Int, y: Int): Boolean =
  "x >= y"

// // extern pure def infixLt(x: Double, y: Double): Boolean =
// //   "x < y"

// // extern pure def infixLte(x: Double, y: Double): Boolean =
// //   "x <= y"

// // extern pure def infixGt(x: Double, y: Double): Boolean =
// //   "x > y"

// // extern pure def infixGte(x: Double, y: Double): Boolean =
// //   "x >= y"

// extern pure def infixLt(x: String, y: String): Boolean =
//   "(x < y)"

// extern pure def infixLte(x: String, y: String): Boolean =
//   "(x <= y)"

// extern pure def infixGt(x: String, y: String): Boolean =
//   "(x > y)"

// extern pure def infixGte(x: String, y: String): Boolean =
//   "(x >= y)"

// Boolean ops
// ===========
extern pure def not(b: Boolean): Boolean =
  "not b"

extern pure def infixOr(x: Boolean, y: Boolean): Boolean =
  "x orelse y"

extern pure def infixAnd(x: Boolean, y: Boolean): Boolean =
  "x andalso y"

// // Pairs
// // =====
// record Tuple2[A, B](first: A, second: B)
// record Tuple3[A, B, C](first: A, second: B, third: C)
// record Tuple4[A, B, C, D](first: A, second: B, third: C, fourth: D)
// record Tuple5[A, B, C, D, E](first: A, second: B, third: C, fourth: D, fifth: E)
// record Tuple6[A, B, C, D, E, F](first: A, second: B, third: C, fourth: D, fifth: E, sixth: F)

// // Exceptions
// // ==========
// // a fatal runtime error that cannot be caught
// extern io def panic[R](msg: String): R =
//   "(raise Fail msg)"

// effect Exception[E] {
//   def raise[A](exception: E, msg: String): A
// }
// record RuntimeError()

// def raise[A](msg: String): A / Exception[RuntimeError] = do raise(RuntimeError(), msg)

// // converts exceptions of (static) type E to an uncatchable panic that aborts the program
// def panicOn[E] { prog: => Unit / Exception[E] }: Unit =
//   try { prog() } with Exception[E] { def raise[A](exception: E, msg: String) = panic(msg) }

// // reports exceptions of (static) type E to the console
// def report[E] { prog: => Unit / Exception[E] }: Unit / Console =
//   try { prog() } with Exception[E] { def raise[A](exception: E, msg: String) = println(msg) }

// // ignores exceptions of (static) type E
// // TODO this should be called "ignore" but that name currently clashes with internal pattern matching names on $effekt
// def ignoring[E] { prog: => Unit / Exception[E] }: Unit =
//   try { prog() } with Exception[E] { def raise[A](exception: E, msg: String) = () }

// // Control Flow
// // ============
// def each(start: Int, end: Int) { action: (Int) => Unit } = {
//   var i = start;
//   while (i < end) {
//       action(i)
//       i = i + 1
//   }
// }

// def repeat(n: Int) { action: () => Unit } = each(0, n) { n => action() }



// // Benchmarking
// // ============

// // Current time in nanoseconds
// // TODO use a better timer
// // extern control def currentTimeNanos(): Int =
// //   "$effekt.delayed(() => new Date().getTime() * 1000)"

// // extern io def setTimeout(callback: () => Unit at {}, timeout: Int): Unit =
// //   "(function() { window.setTimeout(() => callback().run(), timeout); return $effekt.unit; })()"

// // // runs the block and returns the time in nanoseconds
// // def timed { block: => Unit }: Int = {
// //   val before = currentTimeNanos()
// //   block()
// //   val after = currentTimeNanos()
// //   after - before
// // }

// // def measure(warmup: Int, iterations: Int) { block: => Unit }: Unit / Console = {
// //   def run(n: Int, report: Boolean): Unit = {
// //     if (n <= 0) { () } else {
// //       val time = timed { block() };
// //       if (report) { println(time) } else { () };
// //       run(n - 1, report)
// //     }
// //   }
// //   run(warmup, false)
// //   run(iterations, true)
// // }
