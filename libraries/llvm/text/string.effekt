module text/string

import immutable/option
import immutable/list

extern pure def length(s: String): Int = """
   %x = call %Int @c_buffer_length(%Pos %s)
   call void @c_buffer_refcount_decrement(%Pos %s)
   ret %Int %x
"""
extern pure def substring(s: String, start: Int, end: Int): String = """
   %x = call %Pos @c_buffer_substring(%Pos %s, i64 %start, i64 %end)
   call void @c_buffer_refcount_decrement(%Pos %s)
   ret %Pos %x
"""
def unsafeCharAt(s: String, i: Int): String = substring(s, i, i+1)

def charAt(str: String, i: Int): Option[String] = {
    if ( i < 0 || i >= length(str)) {
        None()
    } else {
        Some(unsafeCharAt(str, i))
    }
}

def startsWith(str: String, prefix: String): Boolean = {
    if (length(str) < length(prefix)) {
        false
    } else {
        substring(str, 0, length(prefix)) == prefix
    }
}
def map(str: String){ f: String => String }: String = {
    def rec(i: Int, acc: String): String = {
        if (i < length(str)) {
            rec(i+1, acc ++ f(unsafeCharAt(str, i)))
        } else acc
    }
    rec(0, "")
}
def map[A](str: String){ f: String => A }: List[A] = {
    def rec(i: Int): List[A] = {
        if (i < length(str)) {
            Cons(f(unsafeCharAt(str, i)), rec(i+1))
        } else Nil()
    }
    rec(0)
}
def indexOf(str: String, start: Int, substr: String): Option[Int] = {
    if(length(str) - start < length(substr)) {
        None()
    } else if(substring(str, start, start + length(substr)) == substr) {
        Some(start)
    } else {
        indexOf(str, start + 1, substr)
    }
}
// // TODO: broken
// def split(str: String, sep: String): List[String] = {
//     def rec(startcheck: Int, startcopy: Int): List[String] = {
//         if (length(str) < startcheck + length(sep)) {
//             Cons(substring(str, startcopy, length(str)), Nil())
//         } else {
//             if(substring(str, startcheck, startcheck + length(sep)) == sep) {
//                 Cons(substring(str, startcopy, startcheck), 
//                      rec(startcheck + length(sep), startcheck + length(sep)))
//             } else {
//                 rec(startcheck + 1, startcopy)
//             }
//         }
//     }
//     if (sep == "") {
//         map(str){ c => c }
//     } else { 
//         rec(0,0) 
//     }
// }

def show(s: String): String =
 "\x22" ++ map(s){ c =>
   if(c == "\x22") {
    "\\\x22"
   } else if (c == "\\") {
    "\\\\"
   } else c
 } ++ "\x22"
def show(l: List[String]): String = showList(l){e => show(e)}
def show(o: Option[String]): String = showOption(o){ e => show(e) }

def toInt(s: String): Option[Int] = {
  def go(i: Int, acc: Int): Int / Exception[RuntimeError] = {
    if(i >= length(s)) {
      acc
    } else if(unsafeCharAt(s, i) == "0") {
      go(i + 1, 10 * acc + 0)
    } else if(unsafeCharAt(s, i) == "1") {
      go(i + 1, 10 * acc + 1)
    } else if(unsafeCharAt(s, i) == "2") {
      go(i + 1, 10 * acc + 2)
    } else if(unsafeCharAt(s, i) == "3") {
      go(i + 1, 10 * acc + 3)
    } else if(unsafeCharAt(s, i) == "4") {
      go(i + 1, 10 * acc + 4)
    } else if(unsafeCharAt(s, i) == "5") {
      go(i + 1, 10 * acc + 5)
    } else if(unsafeCharAt(s, i) == "6") {
      go(i + 1, 10 * acc + 6)
    } else if(unsafeCharAt(s, i) == "7") {
      go(i + 1, 10 * acc + 7)
    } else if(unsafeCharAt(s, i) == "8") {
      go(i + 1, 10 * acc + 8)
    } else if(unsafeCharAt(s, i) == "9") {
      go(i + 1, 10 * acc + 9)
    } else {
        raise("Not an integer")
    }
  }
  try {
    if(s.startsWith("-")) {
        Some(0 - go(1, 0))
    } else {
        Some(go(0, 0))
    }
  } with Exception[RuntimeError] {
    def raise[A](e: RuntimeError, msg: String) = {
      None()
    }
  }
}