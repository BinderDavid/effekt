module effekt

extern effect Console

// Runtime
extern include "effekt_runtime.js"

// Builtins
extern include "effekt_builtins.js"

// Pattern Matching
extern include "effekt_matching.js"


// Side effecting ops
// ==================
extern io def println[R](value: R): Unit =
  "println$impl(value)"

extern io def inspect[R](value: R): Unit =
  "console.log(value)"

extern io def random(): Double =
  "Math.random()"

extern io def timestamp(): Int =
  "Date.now()"

// String ops
// ==========
extern pure def show[R](value: R): String =
  "show$impl(value)"

extern pure def infixConcat(s1: String, s2: String): String =
  "s1 + s2"

// Math ops
// ========
extern pure def infixAdd(x: Int, y: Int): Int =
  "(x + y)"

extern pure def infixMul(x: Int, y: Int): Int =
  "(x * y)"

extern pure def infixDiv(x: Int, y: Int): Int =
  "Math.floor(x / y)"

extern pure def infixSub(x: Int, y: Int): Int =
  "(x - y)"

extern pure def mod(x: Int, y: Int): Int =
  "(x % y)"

extern pure def infixAdd(x: Double, y: Double): Double =
  "(x + y)"

extern pure def infixMul(x: Double, y: Double): Double =
  "(x * y)"

extern pure def infixSub(x: Double, y: Double): Double =
  "(x - y)"

extern pure def infixDiv(x: Double, y: Double): Double =
  "(x / y)"


extern pure def cos(x: Double): Double =
  "Math.cos(x)"

extern pure def sin(x: Double): Double =
  "Math.sin(x)"

extern pure def atan(x: Double): Double =
  "Math.atan(x)"

extern pure def tan(x: Double): Double =
  "Math.tan(x)"

extern pure def sqrt(x: Double): Double =
  "Math.sqrt(x)"

extern pure def square(x: Double): Double =
  "(x * x)"

extern pure def log(x: Double): Double =
  "Math.log(x)"

extern pure def log1p(x: Double): Double =
  "Math.log1p(x)"

extern pure def exp(x: Double): Double =
  "Math.exp(x)"

// since we do not have "extern val", yet
extern pure def _pi(): Double =
  "Math.PI"

extern pure def toInt(d: Double): Int =
  "Math.round(d)"

extern pure def toDouble(d: Int): Double =
  "d"

extern pure def floor(d: Double): Int =
  "Math.floor(d)"

extern pure def ceil(d: Double): Int =
  "Math.ceil(d)"


// Comparison ops
// ==============
extern pure def infixEq[R](x: R, y: R): Boolean =
  "equals$impl(x, y)"

extern pure def infixNeq[R](x: R, y: R): Boolean =
  "!equals$impl(x, y)"

extern pure def infixLt(x: Int, y: Int): Boolean =
  "x < y"

extern pure def infixLte(x: Int, y: Int): Boolean =
  "x <= y"

extern pure def infixGt(x: Int, y: Int): Boolean =
  "x > y"

extern pure def infixGte(x: Int, y: Int): Boolean =
  "x >= y"

extern pure def infixLt(x: Double, y: Double): Boolean =
  "x < y"

extern pure def infixLte(x: Double, y: Double): Boolean =
  "x <= y"

extern pure def infixGt(x: Double, y: Double): Boolean =
  "x > y"

extern pure def infixGte(x: Double, y: Double): Boolean =
  "x >= y"

extern pure def infixLt(x: String, y: String): Boolean =
  "x < y"

extern pure def infixLte(x: String, y: String): Boolean =
  "x <= y"

extern pure def infixGt(x: String, y: String): Boolean =
  "x > y"

extern pure def infixGte(x: String, y: String): Boolean =
  "x >= y"

// Boolean ops
// ===========
// for now those are considered eager
extern pure def not(b: Boolean): Boolean =
  "!b"

extern pure def infixOr(x: Boolean, y: Boolean): Boolean =
  "x || y"

extern pure def infixAnd(x: Boolean, y: Boolean): Boolean =
  "x && y"
