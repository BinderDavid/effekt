module show

import effekt

extern def println(value: String): Unit =
  ml { print(value); print("\n") }
  llvm """
    call void @c_io_println_String(%Pos %value)
    call void @c_buffer_refcount_decrement(%Pos %value)
    ret %Pos zeroinitializer ; Unit
  """

extern io def print(value: String): Unit =
  ml "print ${value}"

def println(value: Int): Unit = println(value.show)
def println(value: Unit): Unit = println(value.show)
def println(value: Double): Unit = println(value.show)
def println(value: Bool): Unit = println(value.show)

extern pure def show(value: Int): String =
  ml "show'int ${value}"
  llvm """
    %z = call %Pos @c_buffer_show_Int(%Int %value)
    ret %Pos %z
  """

def show(value: Unit): String = "()"

extern pure def show(value: Double): String =
  ml "show'real ${value}"
  llvm """
    %z = call %Pos @c_buffer_show_Double(%Double %value)
    ret %Pos %z
  """

def show(value: String): String =
  value

def show(value: Bool): String =
  if (value) "true" else "false"

// TODO implement properly
extern pure def show(value: Char): String =
  ml "show'int ${value}"
  llvm """
    %z = call %Pos @c_buffer_show_Int(%Int %value)
    ret %Pos %z
  """