module string

import effekt
import option
import array

extern pure def infixConcat(s1: String, s2: String): String =
  js "${s1} + ${s2}"
  chez "(string-append ${s1} ${s2})"
  ml "${s1} ^ ${s2}"

def charAt(str: String, index: Int): Option[String] =
  if (index < 0 || length(str) <= index)
    Some(unsafeCharAt(str, index))
  else None()

extern pure def length(str: String): Int =
  js "${str}.length"
  chez "(string-length ${str})"
  ml "String.size ${str}"

extern pure def repeat(str: String, n: Int): String =
  js "${str}.repeat(${n})"
  chez "(letrec ([repeat (lambda (${n} acc) (if (<= ${n} 0) acc (repeat (- ${n} 1) (string-append acc ${str}))))]) (repeat ${n} (list->string '())))"

extern pure def unsafeSubstring(str: String, from: Int, to: Int): String =
  js "${str}.substring(${from}, ${to})"
  chez "(substring ${str} ${from} ${to})"
  ml "String.extract (${str}, ${from}, SOME (${to} - ${from}))"

def substring(str: String, from: Int, to: Int): String = {
  def clamp(lower: Int, x: Int, upper: Int) = max(lower, min(x, upper))

  str.unsafeSubstring(clamp(0, from, to), clamp(0, to, str.length))
}

def substring(str: String, from: Int): String =
  str.unsafeSubstring(from, str.length)

extern pure def split(str: String, sep: String): Array[String] =
  js "${str}.split(${sep})"

extern pure def trim(str: String): String =
  js "${str}.trim()"

def toInt(str: String): Option[Int] =
  undefinedToOption(str.unsafeToInt)

// TODO add a Char type...
extern pure def unsafeCharAt(str: String, n: Int): String =
  js "${str}[${n}]"
  ml "SOME (String.sub (${str}, ${n}))" // Not unsafe in ML

/**
 * ML: also accepts sml style `~2` for unary minus along with `+2` and `-2`
 */
extern pure def unsafeToInt(str: String): Int =
  js "(Number.isNaN(parseInt(${str})) ? undefined : parseInt(${str}))"
  chez "(string->number ${str})"
  ml "Int.fromString ${str}"

def indexOf(str: String, sub: String): Option[Int] = {
  val index = str.unsafeIndexOf(sub)
  if (index < 0) { None() } else { Some(index) }
}

def lastIndexOf(str: String, sub: String): Option[Int] = {
  val index = str.unsafeLastIndexOf(sub)
  if (index < 0) { None() } else { Some(index) }
}

extern pure def unsafeIndexOf(str: String, sub: String): Int = js "${str}.indexOf(${sub})"
extern pure def unsafeLastIndexOf(str: String, sub: String): Int = js "${str}.lastIndexOf(${sub})"


// def indexOf(str: String, sub: String): Option[Int] = {
//   def loop(str: String, sub: String, index: Int): Int = {
//     if (index >= str.length) { -1 }
//     else if (str.substring(index).startsWith(sub)) { index }
//     else { loop(str, sub, index + 1) }
//   }
//   val index = loop(str, sub, 0)
//   if (index == -1) { None() } else { Some(index) }
// }

// def lastIndexOf(str: String, sub: String): Option[Int] = {
//   def loop(str: String, sub: String, index: Int): Int = {
//     if (index < 0) { -1 }
//     else if (str.substring(index).startsWith(sub)) { index }
//     else { loop(str, sub, index - 1) }
//   }
//   val index = loop(str, sub, str.length)
//   if (index == -1) { None() } else { Some(index) }
// }

extern pure def startsWith(str: String, prefix: String): Bool =
  js "${str}.startsWith(${prefix})"
  ml "String.isPrefix ${prefix} ${str}"

extern pure def endsWith(str: String, suffix: String): Bool =
  js "${str}.endsWith(${suffix})"
  ml "String.isSuffix ${suffix} ${str}"

// ANSI escape codes
val ANSI_GREEN = "\u001b[32m"
val ANSI_RED = "\u001b[31m"
val ANSI_RESET = "\u001b[0m"
