module io/network

import bytes
import io

namespace js {
  extern js """
    const net = require('node:net');

    function listen(server, port, host, listener) {
      server.listen(port, host);
      server.on('connection', listener);
    }
  """

  extern type JSServer // = net.Server
  extern type JSSocket // = net.Socket
  extern io def server(): JSServer =
    js "net.createServer()"
  extern io def listen(server: JSServer, port: Int, host: String, listener: JSSocket => Unit at {io, async, global}): Unit =
    js "listen(${server}, ${port}, ${host}, (socket) => (${listener})(socket).run())"

  extern async def send(socket: JSSocket, data: Bytes): Unit =
    js "$effekt.callcc(callback => ${socket}.write(${data}, callback))"

  extern async def receive(socket: JSSocket): Bytes =
    js "$effekt.callcc(callback => ${socket}.once('data', callback))"

  extern async def end(socket: JSSocket): Unit =
    js "$effekt.callcc(callback => ${socket}.end(callback))"
}

interface Socket {
  def send(message: Bytes): Unit
  def receive(): Bytes
  def end(): Unit
}

def server(host: String, port: Int, handler: () => Unit / Socket at {io, async, global}): Unit = {
  val server = js::server();
  js::listen(server, port, host, box { socket =>
    println("New connection")
    spawn(box {
      try handler()
      with Socket {
        def send(message) =
          resume(js::send(socket, message))
        def receive() =
          resume(js::receive(socket))
        def end() =
          resume(js::end(socket))
      }
    })
  })
}


namespace examples {
  def helloWorldApp(): Unit / Socket = {
    val request = do receive();

    println("Received a request: " ++ request.toUTF8)

    if (request.toUTF8.startsWith("GET /")) {
      do send(fromUTF8("HTTP/1.1 200 OK\r\n\r\nHello from Effekt!"))
    } else {
      do send("HTTP/1.1 400 Bad Request\r\n\r\n".fromUTF8)
    }
    do end()
  }

  // A server that just shows "Hello from Effekt!" on localhost:8080
  def main() = {
    val port = 8080
    println("Starting server on http://localhost:" ++ port.show)

    server("localhost", port, box {
      helloWorldApp()
    })
  }
}
