module io

import ref
import queue

extern include llvm "../llvm/io.ll"
extern include js "../js/io.js"


// Event Loop
// ----------

interface Eventloop {}

type Task[T] = () => T / Eventloop at {io, control, global}

def eventloop(program: Task[Unit]): Unit = direct::eventloop(box {
  try program() with Eventloop {}
})

namespace direct {

  extern io def eventloop(program: () => Unit at {global,io,control}): Unit =
  js "${program}().run()"
  llvm """
    call void @run(%Neg %program)
    %loop = call ptr @uv_default_loop()
    call i32 @uv_run(ptr %loop, i32 0)
    call void @uv_loop_close(ptr %loop)
    ret %Pos zeroinitializer
  """

}

// Promises
// --------

extern type Promise[T]
  // = js "{promise: Promise, resolve: Æ’}"
  // = llvm "Promise"

interface Promises {
  def promise[T](p: Task[T]): Promise[T]
  def await[T](p: Promise[T]): T
}

namespace promise {
  extern js """
    function promise$make() {
      let resolve;
      const promise = new Promise((res, rej) => {
        resolve = res;
      });
      return { resolve: resolve, promise: promise };
    }
  """

  extern io def make[T](): Promise[T] =
    js "promise$make()"
    llvm """
      ; Get the default loop and run it.
      %promise = call %Pos @c_promise_make()
      ret %Pos %promise
    """

  extern io def resolve[T](p: Promise[T], value: T): Unit =
    js "${p}.resolve(${value})"
    llvm """
      ; Get the default loop and run it.
      call void @c_promise_resolve(%Pos %p, %Pos %value)
      ret %Pos zeroinitializer
    """

  extern io def await[T](p: Promise[T], callback: T => Unit at {io, global}): Unit =
    js "${p}.promise.then(res => (${callback})(res).run())"
    llvm """
      ; Get the default loop and run it.
      call void @c_promise_await(%Pos %p, %Neg %callback)
      ret %Pos zeroinitializer
    """
}


