module effekt

namespace js {
  // Runtime
  extern include js "../js/effekt_runtime.js"

  // Builtins
  extern include js "../js/effekt_builtins.js"
}

namespace chez {

  // All Chez Scheme backends
  // ------------------------
  extern include chez "../chez/common/effekt_primitives.ss"

  // call/cc based implementation
  // ----------------------------
  extern include chezCallCC "../chez/callcc/seq0.ss"
  extern include chezCallCC "../chez/callcc/tail0.ss"
  extern include chezCallCC "../chez/callcc/effekt.ss"

  // CPS implementation
  // ------------------
  extern include chezLift "../chez/lift/effekt.ss"

  // Monadic implementation
  // ----------------------
  extern include chezMonadic "../chez/monadic/seq0.ss"
  extern include chezMonadic "../chez/monadic/effekt.ss"
}

namespace ml {
  extern include ml "../ml/effekt.sml"
}

// Side effecting ops
// ==================

extern io def random(): Double =
  js "Math.random()"
  chez "(random 1.0)"
  ml "mlRandomReal ()"

// References and state
// ====================
// the following type is defined in builtins.scala
// interface Ref[T] { def get(): T; def put(t: T): Unit }
// extern io def freshIn[T](t: T) {r: Region}: Ref[T] at {r} = js "r.fresh(${t})"
// extern io def freshGlobal[T](t: T): Ref[T] at {global} = js "$effekt.fresh(${t})"

// Math ops
// ========
extern pure def infixAdd(x: Int, y: Int): Int =
  js "(${x} + ${y})"
  chez "(+ ${x} ${y})"
  ml "(${x}: int) + ${y}"

extern pure def infixMul(x: Int, y: Int): Int =
  js "(${x} * ${y})"
  chez "(* ${x} ${y})"
  ml "(${x}: int) * ${y}"

extern pure def infixDiv(x: Int, y: Int): Int =
  js "Math.floor(${x} / ${y})"
  chez "(floor (/ ${x} ${y}))"
  ml "(${x}: int) div ${y}"

extern pure def infixSub(x: Int, y: Int): Int =
  js "(${x} - ${y})"
  chez "(- ${x} ${y})"
  ml "(${x}: int) - ${y}"

extern pure def mod(x: Int, y: Int): Int =
  js "(${x} % ${y})"
  chez "(modulo ${x} ${y})"
  ml "(${x}: int) mod ${y}"

extern pure def infixAdd(x: Double, y: Double): Double =
  js "(${x} + ${y})"
  chez "(+ ${x} ${y})"
  ml "(${x}: real) + ${y}"

extern pure def infixMul(x: Double, y: Double): Double =
  js "(${x} * ${y})"
  chez "(* ${x} ${y})"
  ml "(${x}: real) * ${y}"

extern pure def infixSub(x: Double, y: Double): Double =
  js "(${x} - ${y})"
  chez "(- ${x} ${y})"
  ml "(${x}: real) - ${y}"

extern pure def infixDiv(x: Double, y: Double): Double =
  js "(${x} / ${y})"
  chez "(/ ${x} ${y})"
  ml "(${x}: real) / ${y}"

extern pure def cos(x: Double): Double =
  js "Math.cos(${x})"
  chez "(cos ${x})"
  ml "Math.cos ${x}"

extern pure def sin(x: Double): Double =
  js "Math.sin(${x})"
  chez "(sin ${x})"
  ml "Math.sin ${x}"

extern pure def atan(x: Double): Double =
  js "Math.atan(${x})"
  chez "(atan ${x})"
  ml "Math.atan ${x}"

extern pure def tan(x: Double): Double =
  js "Math.tan(${x})"
  chez "(tan ${x})"
  ml "Math.tan ${x}"

extern pure def sqrt(x: Double): Double =
  js "Math.sqrt(${x})"
  chez "(sqrt ${x})"
  ml "Math.sqrt ${x}"

def square(x: Double): Double = x * x

extern pure def log(x: Double): Double =
  js "Math.log(${x})"
  chez "(log ${x})"
  ml "Math.ln ${x}"

extern pure def log1p(x: Double): Double =
  js "Math.log1p(${x})"
  chez "(log (+ ${x} 1))"
  ml "Math.ln (${x} + 1.0)"

extern pure def exp(x: Double): Double =
  js "Math.exp(${x})"
  chez "(exp ${x})"
  ml "Math.exp ${x}"

// since we do not have "extern val", yet
extern pure def _pi(): Double =
  js "Math.PI"
  chez "(* 4 (atan 1))"
  ml "Math.pi"

val PI: Double = _pi()

extern pure def toInt(d: Double): Int =
  js "Math.round(${d})"
  chez "(round ${d})"
  ml "Real.round ${d}"

extern pure def toDouble(d: Int): Double =
  js "${d}"
  chez "${d}"
  ml "Real.fromInt ${d}"

extern pure def floor(d: Double): Int =
  js "Math.floor(${d})"
  chez "(floor ${d})"
  ml "Real.floor ${d}"

extern pure def ceil(d: Double): Int =
  js "Math.ceil(${d})"
  chez "(ceiling ${d})"
  ml "Real.ceil ${d}"

def min(n: Int, m: Int): Int =
  if (n < m) n else m

def max(n: Int, m: Int): Int =
  if (n > m) n else m

// Comparison ops
// ==============
extern pure def infixEq[R](x: R, y: R): Bool =
  js "equals$impl(${x}, ${y})"
  chez "(equal_impl ${x} ${y})"
  ml "${x} = ${y}"

extern pure def infixNeq[R](x: R, y: R): Bool =
  js "!equals$impl(${x}, ${y})"
  chez "(not (equal_impl ${x} ${y}))"
  ml "not (${x} = ${y})"

/**
 * Result of comparison between two objects according to some order:
 *
 * - `Less()` means that the first object is *before* the first in the order,
 * - `Equal()` means that the two objects are the same in the order,
 * - and `Greater()` means that the second object is *before* the first in the order.
 */
type Ordering {
   Less();
   Equal();
   Greater()
 }

 extern pure def genericCompareImpl[R](x: R, y: R): Int =
   js "compare$impl(${x}, ${y})"
   default { <{ "TODO implement" }> }

 // Compares two values of the same type, returning an `Ordering`.
 def genericCompare[R](x: R, y: R): Ordering = {
   genericCompareImpl(x, y) match {
    case -1 => Less()
    case 0 => Equal()
    case 1 => Greater()
    case _ => <{ "Impossible: JS comparison returned invalid value!" }>
   }
 }

extern pure def infixLt(x: Int, y: Int): Bool =
  js "(${x} < ${y})"
  chez "(< ${x} ${y})"
  ml "(${x}: int) < ${y}"

extern pure def infixLte(x: Int, y: Int): Bool =
  js "(${x} <= ${y})"
  chez "(<= ${x} ${y})"
  ml "(${x}: int) <= ${y}"

extern pure def infixGt(x: Int, y: Int): Bool =
  js "(${x} > ${y})"
  chez "(> ${x} ${y})"
  ml "(${x}: int) > ${y}"

extern pure def infixGte(x: Int, y: Int): Bool =
  js "(${x} >= ${y})"
  chez "(>= ${x} ${y})"
  ml "(${x}: int) >= ${y}"

extern pure def infixLt(x: Double, y: Double): Bool =
  js "(${x} < ${y})"
  chez "(< ${x} ${y})"

extern pure def infixLte(x: Double, y: Double): Bool =
  js "(${x} <= ${y})"
  chez "(<= ${x} ${y})"
  ml "(${x}: int) <= ${y}"

extern pure def infixGt(x: Double, y: Double): Bool =
  js "(${x} > ${y})"
  chez "(> ${x} ${y})"
  ml "(${x}: int) > ${y}"

extern pure def infixGte(x: Double, y: Double): Bool =
  js "(${x} >= ${y})"
  chez "(>= ${x} ${y})"
  ml "(${x}: int) >= ${y}"

// TODO do we really need those? if yes, move to string.effekt
extern pure def infixLt(x: String, y: String): Bool =
  js "(${x} < ${y})"
  chez "(< ${x} ${y})"
  ml "(${x}: int) < ${y}"

extern pure def infixLte(x: String, y: String): Bool =
  js "(${x} <= ${y})"
  chez "(<= ${x} ${y})"
  ml "(${x}: int) <= ${y}"

extern pure def infixGt(x: String, y: String): Bool =
  js "(${x} > ${y})"
  chez "(> ${x} ${y})"
  ml "(${x}: int) > ${y}"

extern pure def infixGte(x: String, y: String): Bool =
  js "(${x} >= ${y})"
  chez "(>= ${x} ${y})"
  ml "(${x}: string) >= ${y}"


// Boolean operations
// ==================
extern pure def not(b: Bool): Bool =
  js "!${b}"
  chez "(not ${b})"
  ml "not ${b}"

def infixOr { first: => Bool } { second: => Bool }: Bool =
  if (first()) true else second()

def infixAnd { first: => Bool } { second: => Bool }: Bool =
  if (first()) second() else false


// Undefined and Null
// ==================
// Should only be used for interop with FFI, since values in Effekt
// should not be undefined.
//
//   js:   undefined || null
//   chez: #f
//   ml:  NONE (of option 'a)

/**
 * The value used by the FFI to represent undefined values
 */
extern pure def undefined[A](): A =
  js "undefined"
  chez "#f"
  ml "NONE"

/**
 * Is an FFI value undefined?
 */
extern pure def isUndefined[A](value: A): Bool =
  js "(${value} === undefined || ${value} == null)"
  chez "(eq? ${value} #f)"
  ml "Option.isSome ${value}"


// Tuples
// ======
record Tuple2[A, B](first: A, second: B)
record Tuple3[A, B, C](first: A, second: B, third: C)
record Tuple4[A, B, C, D](first: A, second: B, third: C, fourth: D)
record Tuple5[A, B, C, D, E](first: A, second: B, third: C, fourth: D, fifth: E)
record Tuple6[A, B, C, D, E, F](first: A, second: B, third: C, fourth: D, fifth: E, sixth: F)


// Control Flow
// ============
interface Control {
  def break(): Unit
  def continue(): Unit
}

def loop { f: () => Unit / Control }: Unit = try {
  def go(): Unit = { f(); go() }
  go()
} with Control {
  def break() = ()
  def continue() = loop { f }
}

/**
 * Calls provided action repeatedly. `start` is inclusive, `end` is not.
 */
def each(start: Int, end: Int) { action: (Int) => Unit / Control } = {
  var i = start;
  loop {
    if (i < end) { val el = i; i = i + 1; action(el) }
    else { do break() }
  }
}

def repeat(n: Int) { action: () => Unit / Control } = each(0, n) { n => action() }
