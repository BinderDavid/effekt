module examples/pos/unsafe_cont

import unsafe/cont
import immutable/dequeue
import immutable/option

effect Process {
    def fork(): Boolean
    def exit(): Unit
    def suspend(): Unit
}

def fork { p: Unit }: Unit / Process =
  if (fork()) { p(); exit() }
  else { () }

// Here we use the unsafe API manually asserting that the continuation does not leave the scope
def roundrobin { p: Unit / Process }: Unit = {
    var ps: Dequeue[Cont[Unit, Unit]] = emptyQueue();

    def dequeue(): Unit =
        ps.popBack.foreach { case (k, q) => ps = q; k.apply(()) }

    def enqueue { p: Unit }: Unit =
        ps = ps.pushFront(cont { (unit) => p() })

    try { p(); dequeue() } with Process {
        def fork() = { enqueue { resume(false) }; resume(true)  }
        def exit() = dequeue()
        def suspend() = { enqueue { resume(()) }; dequeue() }
    }
}

def main() = {
    roundrobin {
        println("Parent: 1");
        fork {
            println("Child: 1");
            suspend();
            println("Child: 2");
            suspend();
            println("Child: 3");
            suspend();
            println("Child: 4");
            suspend();
            println("Child: 5");
            suspend();
            println("Child: 6")
        };
        println("Parent: 2");
        suspend();
        println("Parent: 3");
        suspend();
        println("Parent: 4")
    }
}