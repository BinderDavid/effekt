module examples/pos/simpleparser

import text/string
import text/regex
import immutable/list
import immutable/option


effect Fail[A](msg: String) : A

def stringToInt(str: String): Int / { Fail } =
  str.toInt.getOrElse { do Fail("cannot convert input to integer") }

def perhapsAdd(): Int / { Fail } = stringToInt("1") + stringToInt("2")

def handledExample() = try { perhapsAdd() } with Fail { (msg) => println(msg); 0 }


effect Next(): String

def print3(): Unit / { Next, Console} = {
  println(do Next());
  println(do Next());
  println(do Next())
}

def alwaysHello[R] { prog: () => R / Next }: R / {} =
  try { prog() } with Next { () => resume("hello") }

def number() : Int / { Next, Fail } =
  stringToInt(do Next())

def tokenize[R](input: String) { prog: () => R / Next } : R / Fail = {
  // TODO: split input at whitespace
  try { prog() } with Next { () => resume("oh") }
}


effect Flip(): Boolean

def many[R] { prog: () => R }: List[R] / Flip = {
  var result: List[R] = Nil();
  while (do Flip()) {
    result = Cons(prog(), result)
  };
  reverse(result)
}

type Result[R] {
  Success(res: R);
  Failure(msg: String)
}

def backtrack[R] { prog: () => R / { Fail, Flip } }: Result[R] / {} =
  try {
    Success(prog())
  } with Fail { (msg) =>
    Failure(msg)
  } with Flip { () =>
    resume(true) match {
      case Failure(msg) => resume(false)
      case Success(res) => Success(res)
    }
  }


effect Parser = { Fail, Flip, Next }

def manyNumbers() : List[Int] / Parser = many { number() }

def parse[R](input: String) { prog: () => R / Parser }: Result[R] / {} =
  backtrack { tokenize(input) { prog() } }


def main() = {
  println(parse("12 34 56") { manyNumbers() })
  // Success(Cons(12, Cons(34, Cons(56, Nil()))))
}
