interface Exc { def throw(msg: String): Unit }
interface Console { def println[A](a: A): Unit }
interface Time { def now(): Int }

// console and time are "global" -- that is, module wide capabilities
def globalCapabilities { console: Console } { time: Time }: Unit = {
  def parallel(f: () => Unit at {}, g: () => Unit at {}): Unit = ()
  parallel(
      box { () => () },
      box { () => time.now(); console.println("world!")  } // ERROR Not allowed {time, console}
  )
}

def run[T] { prog : {Console} {Time} => T }: T =
  try {
    prog {console} {time}
  } with console: Console {
    def println[A](msg) = { println(msg); resume(()) }
  } with time: Time {
    def now() = resume(timestamp())
  }

def main() = run { globalCapabilities }
