[error] examples/neg/inference.effekt:23:33: Different arms of a conditional/match have incompatible types.

One arm has type
  Int
while another one has type
  String
def test2(l1: List[Int]): Int = l1 match {
                                ^
[error] examples/neg/inference.effekt:23:33: Expected Int but got String.
def test2(l1: List[Int]): Int = l1 match {
                                ^
[error] examples/neg/inference.effekt:25:17: Expected Int but got String.
  case Nil() => ""
                ^^
[error] examples/neg/inference.effekt:25:17: Expected Int but got String.
  case Nil() => ""
                ^
[error] examples/neg/inference.effekt:56:25: Expected List[String] but got List[Int].

Type mismatch between String and Int.
  case Cons(a, rest) => Nil[Int]() // failing to check the call here aborts type checking, so this example goes last
                        ^
