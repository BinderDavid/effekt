import array

interface Ball {
  def bounce(): Bool
}

interface Random {
  def next(): Int
}

def randomBall { rand: Random }: Ball at {global} = {
  var x in global = toDouble(rand.next().mod(500));
  var y in global = toDouble(rand.next().mod(500));
  var xVel in global = toDouble(rand.next().mod(300) - 150);
  var yVel in global = toDouble(rand.next().mod(300) - 150);
  new Ball {
    def bounce() = {
      val xLimit = 500.0;
      val yLimit = 500.0;
      var bounced = false;
      x = x + xVel;
      y = y + yVel;

      if (x > xLimit) {
        x = xLimit; 
        xVel = 0.0 - abs(xVel);
        bounced = true;
      }
      if (x < 0.0) {
        x = 0.0;
        xVel = abs(xVel)
        bounced = true;
      }
      if (y > yLimit) {
        y = yLimit;
        yVel = 0.0 - abs(yVel);
        bounced = true;
      }
      if (y < 0.0) {
        y = 0.0;
        yVel = abs(yVel);
        bounced = true;
      }

      bounced
    }
  }
}

def withRandom[R] { program: { Random } => R }: R = {
  var seed = 74755;
  def rand = new Random {
    def next() = {
      seed = bitwiseAnd((seed * 1309) + 13849, 65535);
      seed
    }
  }
  program {rand}
}

def run(n: Int) = {
  withRandom { {rand: Random} =>
    val ballCount = 100;
    var bounces = 0;
    val balls = array::build(ballCount) { _ => randomBall(){rand} }

    each(0, n) { i =>
      each(0, ballCount) { i =>
        val ball = balls.unsafeGet(i);
        val didBounce = ball.bounce();
        if (didBounce)
          bounces = bounces + 1;
      }
    }

    bounces
  }
}

def main() = {
  println(run(50))
}
