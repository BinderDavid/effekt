import array

interface Break[T] {
  def break(result: T): Nothing
}

def run(n: Int) = {

  val freeRows: Array[Bool] = fill(n, true);
  val freeMaxs: Array[Bool] = fill(2 * n, true);
  val freeMins: Array[Bool] = fill(2 * n, true);
  val queenRows: Array[Int] = fill(n, -1);

  def getRowColumn(r: Int, c: Int): Bool =
    freeRows.unsafeGet(r) && freeMaxs.unsafeGet(c + r) && freeMins.unsafeGet(c - r + (n - 1))

  def setRowColumn(r: Int, c: Int, v: Bool) = {
    freeRows.put(r, v);
    freeMaxs.put(c + r, v);
    freeMins.put(c - r + (n - 1), v)
  }

  def placeQueen(c: Int): Bool =
    try {
      each(0, n) { r =>
        if (getRowColumn(r, c)) {
          queenRows.put(r, c);
          setRowColumn(r, c, false);

          if (c == (n - 1)) {
            do break(true);
          }

          if (placeQueen(c + 1)) {
            do break(true);
          }
          setRowColumn(r, c, true);
        }
      };
      false
    } with Break[Bool] {
        def break(value) = value
    }

  placeQueen(0)

}

def main() = {
  println(run(8))
}